// CPP program for leaky bucket

#include<bits/stdc++.h>

using namespace std;

int main()
{
    int bucket_size,ip_rate,op_rate,time_steps,cur_size=0;
    cout<<"Enter the bucket size: ";
    cin>>bucket_size;
    cout<<"Enter input rate:";
    cin>>ip_rate;
    cout<<"Enter the output rate:";
    cin>>op_rate;
    cout<<"Enter the steps to simulate:";
    cin>>time_steps;
    for(int i=0;i<time_steps;i++)
    {
        int space_left=bucket_size-cur_size;
        int loss=0;
        if(ip_rate<=space_left)
            cur_size+=ip_rate;
        else
        {
            loss=ip_rate-space_left;
            cur_size=bucket_size;
        }
        cur_size-=op_rate;
        cout<<"Time="<<i<<"s | Bucket/Buffer status:"<<cur_size<<"/"<<bucket_size<<", Packet loss= "<<loss<<endl;
    }
}

****************************************************************************************************************************
// CPP program for token bucket

#include <iostream>
#include <queue>

const int BUCKET_SIZE = 20;
const int TOKEN_RATE = 5;

void produceToken(int &tokenCount) {
  if (tokenCount + TOKEN_RATE <= BUCKET_SIZE) {
    tokenCount += TOKEN_RATE;
  } else {
    tokenCount = BUCKET_SIZE;
  }
}

bool consumeToken(int &tokenCount) {
  if (tokenCount > 0) {
    tokenCount--;
    return true;
  }
  return false;
}

int main() {
  std::queue<int> packets;
  int tokenCount = BUCKET_SIZE;

  while (true) {
    produceToken(tokenCount);
    int packetSize = rand() % 10;
    if (packetSize <= tokenCount) {
      packets.push(packetSize);
      tokenCount -= packetSize;
      std::cout << "Packet of size " << packetSize << " added to queue" << std::endl;
    } else {
      std::cout << "Packet discarded due to lack of tokens" << std::endl;
    }
    std::cout << "Token count: " << tokenCount << std::endl;
    std::cout << "Queue size: " << packets.size() << std::endl;
  }
  return 0;
}
